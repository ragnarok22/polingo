name: CI

on:
  push:
    branches:
      - main
  pull_request:

# Cancel outdated runs for the same workflow and ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      docs_only: ${{ steps.classify.outputs.docs_only }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            docs:
              - 'docs/**'
              - '**/*.md'
              - '**/*.mdx'
            ci:
              - '.github/workflows/**'
              - 'Makefile'
              - 'package.json'
              - 'pnpm-lock.yaml'
              - 'pnpm-workspace.yaml'
              - 'tsconfig*.json'
              - 'tsup.config.shared.ts'
              - 'vitest.config.ts'
              - 'packages/**'

      - name: Determine docs-only change
        id: classify
        env:
          DOCS_CHANGED: ${{ steps.filter.outputs.docs }}
          CI_TOUCHED: ${{ steps.filter.outputs.ci }}
        run: |
          if [ "$DOCS_CHANGED" = "true" ] && [ "$CI_TOUCHED" != "true" ]; then
            echo "docs_only=true" >> "$GITHUB_OUTPUT"
          else
            echo "docs_only=false" >> "$GITHUB_OUTPUT"
          fi

  # Lint and format checks (fast feedback)
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docs_only != 'true'

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: |
            pnpm-lock.yaml
            pnpm-workspace.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Run ESLint
        run: pnpm lint

      - name: Check formatting
        run: pnpm format:check

  # Type checking
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docs_only != 'true'

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: |
            pnpm-lock.yaml
            pnpm-workspace.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Run type checking
        run: pnpm typecheck

  # Build packages
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docs_only != 'true'

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: |
            pnpm-lock.yaml
            pnpm-workspace.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Build packages
        run: make build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: packages/*/dist
          retention-days: 1

  # Test matrix across Node.js versions and platforms
  test:
    name: Test (Node ${{ matrix.node }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: changes
    if: needs.changes.outputs.docs_only != 'true'

    strategy:
      fail-fast: false
      matrix:
        include:
          - node: 18
            os: ubuntu-latest
          - node: 20
            os: ubuntu-latest
          - node: 20
            os: windows-latest
          - node: 20
            os: macos-latest
          - node: 22
            os: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          cache-dependency-path: |
            pnpm-lock.yaml
            pnpm-workspace.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Cache Vitest output
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.vitest
            node_modules/.cache/vitest
            .vitest
          key: vitest-${{ runner.os }}-${{ matrix.node }}-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            vitest-${{ runner.os }}-${{ matrix.node }}-

      - name: Run tests
        run: make test

      - name: Upload Vitest results to Codecov
        if: runner.os == 'ubuntu-latest' && matrix.node == 20 && hashFiles('packages/**/test-results/vitest-junit.xml') != ''
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: packages/**/test-results/vitest-junit.xml
          flags: vitest
          fail_ci_if_error: true
          verbose: true

  # Coverage (only on main platform and Node version)
  coverage:
    name: Coverage
    runs-on: ubuntu-latest
    needs: [changes, lint, typecheck, build]
    if: needs.changes.outputs.docs_only != 'true'

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up pnpm
        uses: pnpm/action-setup@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: |
            pnpm-lock.yaml
            pnpm-workspace.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Cache Vitest output
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.vitest
            node_modules/.cache/vitest
            .vitest
          key: vitest-${{ runner.os }}-coverage-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            vitest-${{ runner.os }}-coverage-

      - name: Run tests with coverage
        run: make coverage

      - name: Upload overall coverage to Codecov
        if: ${{ hashFiles('packages/core/coverage/lcov.info', 'packages/node/coverage/lcov.info', 'packages/react/coverage/lcov.info', 'packages/vue/coverage/lcov.info', 'packages/web/coverage/lcov.info') != '' }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: |
            packages/core/coverage/lcov.info
            packages/node/coverage/lcov.info
            packages/react/coverage/lcov.info
            packages/vue/coverage/lcov.info
            packages/web/coverage/lcov.info
          flags: monorepo
          fail_ci_if_error: true
          verbose: true

      - name: Upload coverage for @polingo/core
        if: ${{ hashFiles('packages/core/coverage/lcov.info') != '' }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: packages/core/coverage/lcov.info
          flags: core
          fail_ci_if_error: true
          verbose: true

      - name: Upload coverage for @polingo/node
        if: ${{ hashFiles('packages/node/coverage/lcov.info') != '' }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: packages/node/coverage/lcov.info
          flags: node
          fail_ci_if_error: true
          verbose: true

      - name: Upload coverage for @polingo/react
        if: ${{ hashFiles('packages/react/coverage/lcov.info') != '' }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: packages/react/coverage/lcov.info
          flags: react
          fail_ci_if_error: true
          verbose: true

      - name: Upload coverage for @polingo/vue
        if: ${{ hashFiles('packages/vue/coverage/lcov.info') != '' }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: packages/vue/coverage/lcov.info
          flags: vue
          fail_ci_if_error: true
          verbose: true

      - name: Upload coverage for @polingo/web
        if: ${{ hashFiles('packages/web/coverage/lcov.info') != '' }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: packages/web/coverage/lcov.info
          flags: web
          fail_ci_if_error: true
          verbose: true
